trigger:
  branches:
    include:
    - master
stages:
- stage: Build
  displayName: Build
  jobs:
  - job: createStorageAccount
    displayName: Create a storage account for persisting terraform state file
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: AzureCLI@2
      displayName: Create storage account for terraform state file
      inputs:
        azureSubscription: $(azuresubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: >
          #! /bin/bash

          az group create --location eastus --name $(terraformstoragerg)

          az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location uksouth --sku Standard_LRS

          az storage container create --name terraform --account-name $(terraformstorageaccount)

          az storage account keys list -g $(terraformstoragerg) -n $(terraformstorageaccount)
  - job: getStorageKey
    displayName: Build resources using terraform
    dependsOn:
    - createStorageAccount
    pool:
      vmImage: windows-latest
    steps:
    - task: AzurePowerShell@5
      displayName: Get storage account key
      inputs:
        azureSubscription: $(azuresubscription)
        ScriptType: InlineScript
        azurePowerShellVersion: LatestVersion
        Inline: >
          $key=(Get-AzStorageAccountKey -ResourceGroupName $(terraformstoragerg) -AccountName $(terraformstorageaccount)).Value[0]

          Write-Host "##vso[task.setvariable variable=storagekey]$key"
    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      displayName: Replace tokens in terraform files
      inputs:
        targetFiles: >
          **/*.tf

          **/*.tfvars
        escapeType: none
        tokenPrefix: __
        tokenSuffix: __
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: Install Terraform Software
      inputs:
        terraformVersion: 0.13.5
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'Executing Terraform : init'
      inputs:
        workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
        backendServiceArm: $(azuresubscription)
        backendAzureRmResourceGroupName: $(terraformstoragerg)
        backendAzureRmStorageAccountName: $(terraformstorageaccount)
        backendAzureRmContainerName: terraform
        backendAzureRmKey: terraform.tfstate
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'Executing Terraform : plan'
      inputs:
        command: plan
        workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
        environmentServiceNameAzureRM: $(azuresubscription)
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'Executing Terraform : apply'
      inputs:
        command: apply
        workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
        commandOptions: -auto-approve
        environmentServiceNameAzureRM: $(azuresubscription)
        backendAzureRmResourceGroupName: $(terraformstoragerg)
        backendAzureRmStorageAccountName: '$(terraformstorageaccount) '
        backendAzureRmContainerName: terraform
        backendAzureRmKey: $(storagekey)
  - job: uploadPackage
    displayName: Uploading FakeRestAPI package
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)/fakerestapi
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    - task: ecdc45f6-832d-4ad9-b52b-ee49e94659be@1
      displayName: Publish FakeRestAPIpackage
      inputs:
        path: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
        artifactName: drop-fakerestapi
- stage: Deploy
  displayName: Deploy
  jobs:
  - deployment: deployApp
    displayName: Deploying FakeRestAPI app to Azure App Service
    pool:
      vmImage: ubuntu-latest
    environment:
      name: $(azureenvironment)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy FakeRestAPI app to Azure App Services
            inputs:
              azureSubscription: $(azuresubscription)
              appName: $(appservice)
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
- stage: postDeployment
  displayName: Post-Deployment
  jobs:
  - job: runNewman
    displayName: Runing Newman/Postman data validation tests
    steps:
    - task: CmdLine@2
      displayName: Run Newman/Postman
      inputs:
        script: >
          newman run -e automatedtesting/postman/postman-vars.json automatedtesting/postman/postman.json --reporters cli,junit --reporter-junit-export $(Build.SourcesDirectory)/automatedtesting/postman/postman.xml

          echo Newman tests run
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: Junit
        testResultsFiles: $(Build.SourcesDirectory)/automatedtesting/postman/*.xml
  - job: publishSelenium
    displayName: Publish Selenium
    steps:
    - task: ecdc45f6-832d-4ad9-b52b-ee49e94659be@1
      inputs:
        path: $(System.DefaultWorkingDirectory)/automatedtesting/selenium/selenium-tests.py
        artifactName: seleniumFile
  - deployment: seleniumOnVMDeploy
    displayName: Install and run Selenium on Virtual Machine
    dependsOn:
    - publishSelenium
    environment:
      name: $(azureenvironment)
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            inputs:
              alias: current
              artifact: seleniumFile
          - task: Bash@3
            displayName: Run Functional tests using Selenium in VM
            inputs:
              targetType: inline
              script: "#!/bin/bash             \nsudo apt-get update -y\nsudo apt-get install python3-pip -y\nsudo apt-get install unzip -y\nsudo apt-get install -y chromium-browser\nsudo apt-get install -y chromium-chromedriver\npip3 install selenium\nsudo mkdir -p /var/log/selenium\nsudo chmod 777 /var/log/selenium\nsudo python3 $(Pipeline.Workspace)/seleniumFile/selenium-tests.py 2>&1 | tee -a /var/log/selenium/selenium.log\nsudo touch /var/log/selenium/selenium.log\n"
  - job: InstallJmeter
    displayName: Install Jmeter Tool
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: JMeterInstaller@0
      inputs:
        jmeterVersion: 5.2.1
    - task: Bash@3
      displayName: Run Jmeter Sample Test
      inputs:
        targetType: inline
        script: jmeter -n -t automatedtesting/jmeter/Starter.jmx -l automatedtesting/jmeter/report/Starter_results.jtl -e -o automatedtesting/jmeter/Starter
    - task: Bash@3
      displayName: Run Endurance Test
      inputs:
        targetType: inline
        script: jmeter -n -t automatedtesting/jmeter/Endurance_Test.jmx -Jresdir=automatedtesting/jmeter/end_test.csv -l automatedtesting/jmeter/report/enduranceresults.jtl -e -o automatedtesting/jmeter/endurancereport
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: automatedtesting/jmeter
        ArtifactName: jmeter
        publishLocation: Container

